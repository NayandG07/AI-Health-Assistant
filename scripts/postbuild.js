// This script adds a _redirects file for Netlify to handle client-side routing
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Create the _redirects content
const redirectsContent = `# Netlify redirects file
# Redirect all routes to index.html for client-side routing
/*    /index.html   200
`;

// Get HuggingFace API key from environment variable
const huggingFaceApiKey = process.env.NEXT_PUBLIC_HUGGINGFACE_API_KEY || process.env.HUGGINGFACE_API_KEY || '';

// Validate if we have a meaningful API key (not just the variable reference)
let apiKeyToUse = huggingFaceApiKey;
if (apiKeyToUse.startsWith('$') || apiKeyToUse === '') {
  console.warn("⚠️ Warning: HuggingFace API key appears to be missing or is just a variable reference.");
  console.warn("Please set the NEXT_PUBLIC_HUGGINGFACE_API_KEY in your Netlify environment variables.");
  apiKeyToUse = '';
} else {
  console.log("✅ HuggingFace API key found. Key starts with:", apiKeyToUse.substring(0, 3) + "...");
}

// Create env-config.js content with proper debugging
const envConfigContent = `// This file is generated by scripts/postbuild.js
window.ENV = {
  NEXT_PUBLIC_HUGGINGFACE_API_KEY: "${apiKeyToUse}",
};
console.log("Environment configuration loaded");
console.log("HuggingFace API key status:", "${apiKeyToUse ? "Available" : "Missing"}", 
  ${apiKeyToUse ? "\"(Key starts with: " + apiKeyToUse.substring(0, 3) + "...)\"" : ""});
`;

// Path to the dist/public directory
const distPublicDir = path.resolve(__dirname, '../dist/public');

// Check if the directory exists
if (fs.existsSync(distPublicDir)) {
  // Write the _redirects file
  const redirectsPath = path.resolve(distPublicDir, '_redirects');
  fs.writeFileSync(redirectsPath, redirectsContent);
  console.log(`Generated _redirects file at ${redirectsPath}`);
  
  // Always create env-config.js in dist/public directory
  const destEnvConfig = path.resolve(distPublicDir, 'env-config.js');
  fs.writeFileSync(destEnvConfig, envConfigContent);
  console.log(`Created env-config.js at ${destEnvConfig}`);
  
  // Also create a copy in client/public for local development
  const clientPublicDir = path.resolve(__dirname, '../client/public');
  if (fs.existsSync(clientPublicDir)) {
    const clientEnvConfig = path.resolve(clientPublicDir, 'env-config.js');
    fs.writeFileSync(clientEnvConfig, envConfigContent);
    console.log(`Created backup env-config.js at ${clientEnvConfig}`);
  }
} else {
  console.error(`Error: ${distPublicDir} does not exist. Build the project first.`);
  process.exit(1);
} 